import { getToken } from "next-auth/jwt";
import { NextRequest, NextResponse } from "next/server";

const secret = process.env.NEXTAUTH_SECRET;

// ‚úÖ Cache menus ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏∞‡∏ß (optional - ‡πÉ‡∏ä‡πâ Map ‡πÅ‡∏ó‡∏ô Redis)
const menuCache = new Map<number, { paths: string[]; timestamp: number }>();
const CACHE_TTL = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

async function fetchUserAccessiblePaths(userId: number, token: string = "") {
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
  const cached = menuCache.get(userId);
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    console.log(`[RBAC] üì¶ Using cached paths for user ${userId}`);
    return cached.paths;
  }

  try {
    const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/Apps_List_Menu`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ UserID: userId }),
      cache: "no-store",
    });

    if (!res.ok) {
      console.error(`[RBAC] ‚ùå Fetch menu fail for user ${userId}, status: ${res.status}`);
      return [];
    }

    const menus = await res.json();
    const accessiblePaths = (menus || [])
      .filter((m: any) => m.path !== null && m.path !== undefined && m.path !== "")
      .map((m: any) => m.path);

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô cache
    menuCache.set(userId, {
      paths: accessiblePaths,
      timestamp: Date.now()
    });

    console.log(`[RBAC] ‚úÖ User ${userId} accessible paths (${accessiblePaths.length}):`, accessiblePaths);
    return accessiblePaths;
  } catch (err) {
    console.error("[RBAC] Middleware fetch error:", err);
    return [];
  }
}

function isPathAllowed(requestPath: string, allowedPaths: string[]): boolean {
  const cleanRequestPath = requestPath.split("?")[0];

  for (const allowedPath of allowedPaths) {
    const cleanAllowedPath = allowedPath.split("?")[0];

    if (cleanRequestPath === cleanAllowedPath || 
        cleanRequestPath.startsWith(cleanAllowedPath + "/")) {
      return true;
    }
  }

  return false;
}

export async function middleware(req: NextRequest) {
  const token = await getToken({ req, secret });
  const { pathname } = req.nextUrl;

  // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á login - ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const publicPaths = ["/login", "/forget_password", "/reset-password", "/unauthorized", "/"];
  
  if (publicPaths.some(path => pathname === path || pathname.startsWith(path + "/"))) {
    return NextResponse.next();
  }

  // ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‚Üí redirect ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  if (!token) {
    const loginUrl = new URL("/login", req.url);
    loginUrl.searchParams.set("redirect", pathname);
    loginUrl.searchParams.set("expired", "true");
    return NextResponse.redirect(loginUrl);
  }

  const userId = token.UserID || token.userid || token.sub;

  if (!userId) {
    return NextResponse.redirect(new URL("/unauthorized", req.url));
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á path (‡∏à‡∏≤‡∏Å cache ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const allowedPaths = await fetchUserAccessiblePaths(Number(userId), String(token.access_token || ""));

  if (allowedPaths.length === 0) {
    return NextResponse.redirect(new URL("/unauthorized", req.url));
  }

  const isAllowed = isPathAllowed(pathname, allowedPaths);

  if (!isAllowed) {
    console.warn(`[AUDIT] ‚ùå User ${userId} DENIED access to ${pathname}`);
    return NextResponse.redirect(new URL("/unauthorized", req.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    "/users/:path*",
    "/fa_control/:path*",
    "/smart/:path*",
    "/reservations/:path*",
  ],
};