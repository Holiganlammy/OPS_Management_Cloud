import { getToken } from 'next-auth/jwt';
import { NextRequest, NextResponse } from 'next/server';

export async function middleware(req: NextRequest) {
  const token = await getToken({
    req,
    secret: process.env.NEXTAUTH_SECRET,
  });

  const { pathname, searchParams } = req.nextUrl;

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login
  if (
    !token &&
    !['/login', '/forget_password', '/reset-password'].includes(pathname)
  ) {
    const redirectTo = `${pathname}${req.nextUrl.search}`;
    const loginUrl = new URL(`/login`, req.url);
    loginUrl.searchParams.set('redirect', redirectTo);
    return NextResponse.redirect(loginUrl);
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡πÅ‡∏•‡∏∞ type
  if (token) {
    const roleId = Number(token.role_id);
    const typeInUrl = searchParams.get('type');
    
    // üîí ‡∏Å‡∏≥‡∏´‡∏ô‡∏î role ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô user ‡πÅ‡∏•‡∏∞ admin
    const userRoles = [2, 5, 7];
    const adminRoles = [1, 3, 4, 6];
    
    // üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ role_id ‡πÄ‡∏õ‡πá‡∏ô user ‡∏´‡∏£‡∏∑‡∏≠ admin
    let correctType: string;
    
    if (userRoles.includes(roleId)) {
      correctType = 'user';
    } else if (adminRoles.includes(roleId)) {
      correctType = 'admin';
    } else {
      // ‡∏ñ‡πâ‡∏≤ role_id ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ role_id ‡πÉ‡∏´‡∏°‡πà)
      correctType = 'user'; // default ‡πÄ‡∏õ‡πá‡∏ô user
    }

    console.log('üîç Debug:', { roleId, typeInUrl, correctType });

    // üö´ ‡∏ñ‡πâ‡∏≤ type ‡πÉ‡∏ô URL ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö role_id ‚Üí ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö redirect ‡πÑ‡∏õ‡∏ó‡∏µ‡πà type ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (typeInUrl && typeInUrl !== correctType) {
      const url = new URL(req.url);
      url.searchParams.set('type', correctType);
      return NextResponse.redirect(url);
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ type ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏° role_id
    if (!typeInUrl) {
      const url = new URL(req.url);
      url.searchParams.set('type', correctType);
      return NextResponse.redirect(url);
    }
  }

  // ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á ‚Üí ‡πÑ‡∏õ‡∏ï‡πà‡∏≠
  return NextResponse.next();
}

export const config = {
  matcher: ['/fa_control/:path*'],
};